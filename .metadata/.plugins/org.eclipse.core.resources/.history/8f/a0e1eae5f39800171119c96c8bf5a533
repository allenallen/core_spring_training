<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

	<!-- 
	     Infrastructure configuration to support system testing the rewards application.
	
		 These beans are defined in a separate file to isolate infrastructure config from application config,
		 as infrastructure often varies between environments.  For example, in a test environment you
		 might use a lightweight in-memory DataSource, while in production you connect to a database server
		 with a connection pool.
	-->

	<!-- TODO 03: Declare a tag to externalize property values. (hint: use context namespace) 
		Create a new rewards/testdb.properties file for it to reference. 
		Externalize the <script> 'location' values used in the
		'dataSource' bean below. Re-run RewardsApplicationServiceTests,
		it should pass.
	-->
	<context:property-placeholder location="classpath:rewards/testdb.properties"/>

	<!-- Creates an in-memory "rewards" database populated with test data for fast testing -->
	<jdbc:embedded-database id="dataSource">
		<jdbc:script location="${schema}" />
		<jdbc:script location="${test-dta}" />
	</jdbc:embedded-database>

	<!-- TODO 04: use the <import /> tag so the current file always 
	comes with app-config.xml. Modify the RewardsApplicationServiceTests
	to specify only one file when loading the ApplicationContext.  When done,
	re-run RewardsApplicationServiceTests, it should pass.	-->

</beans>
