package rewards.application;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

import java.math.BigDecimal;

import javax.money.Monetary;
import javax.money.MonetaryAmount;

import org.junit.Before;
import org.junit.Test;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.context.support.AbstractApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

import rewards.config.ApplicationConfig;
import rewards.config.TestInfrastructureConfig;

// : Run this test before making any changes. It should pass.
public class RewardsApplicationServiceTests {

	private AbstractApplicationContext context;

	private RewardsApplicationService rewardsService;

	private String merchantNumber;
	private String cardNumber;
	private String accountNumber;

	@Before
	public void setUp() throws Exception {
		merchantNumber = "1115558888";
		cardNumber = "1234123412341234";
		accountNumber = "1234567890";

		// TODO 04: Replace the following instruction with one that instantiates Spring
		// from XML files.
		// Use ClassPathXmlApplicationContext. Specify "app-config.xml" and
		// "test-infrastructure-config.xml" as configuration files -- you will need to
		// specify
		// the classpath locations of the files. Save your work and re-run this test, it
		// should pass.
		// context = new AnnotationConfigApplicationContext(
		// ApplicationConfig.class, TestInfrastructureConfig.class);

		context = new ClassPathXmlApplicationContext("classpath:rewards/app-config.xml",
				"classpath:rewards/test-infrastructure-config.xml");

		// Get the bean to use to invoke the application
		rewardsService = context.getBean(RewardsApplicationService.class);

		// Register a shutdown hook with the JVM.
		// This causes the JVM to call the close logic on the application
		// context whenever the JVM is closing.
		context.registerShutdownHook();
	}

	private MonetaryAmount monetaryAmountOf(String amount) {
		return Monetary.getDefaultAmountFactory().setNumber(new BigDecimal(amount)).setCurrency("USD").create();
	}

	private Purchase purchaseOf(String amount) {
		return new Purchase(monetaryAmountOf(amount), merchantNumber, cardNumber);
	}

	@Test
	public void testRewardForPurchase() {
		RewardConfirmation rewardConfirmation = rewardsService.rewardAccountFor(purchaseOf("500.00"));

		// assert the expected reward confirmation results
		assertNotNull(rewardConfirmation);
		assertNotNull(rewardConfirmation.getConfirmationNumber());

		// assert that reward is given to "1234567890"
		assertEquals(accountNumber, rewardConfirmation.getAccountNumber());

		// assert reward of 10 points (50 bucks per point)
		assertEquals(10, rewardConfirmation.getPointsEarned());
	}

}
